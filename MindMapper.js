// Generated by CoffeeScript 1.9.2
(function() {
  var gen_fingerprint = function(){ // in reference to: http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
  return('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {var r = Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16);}));
};
  var MindMap, int, m, node_array, print, str,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  str = function(s) {
    return s.toString();
  };

  int = function(i) {
    return parseInt(i);
  };

  print = function(s) {
    console.log(s);
  };

  String.prototype.remove_empty_lines = function() {
    var results, self;
    self = self.split("\n").join("\n");
    results = [];
    while (indexOf.call(self, "\n\n") >= 0) {
      results.push(self.split("\n\n").join("\n"));
    }
    return results;
  };

  MindMap = (function() {
    var MindMapNode;

    MindMapNode = (function() {
      function MindMapNode(inner_text, parent, x, y, children) {
        this.inner_text = inner_text != null ? inner_text : "";
        this.parent = parent != null ? parent : "root";
        this.x = x != null ? x : 0;
        this.y = y != null ? y : 0;
        this.children = children != null ? children : [];
        this.id = gen_fingerprint();
        print("node generated.\nid:" + this.id + "\ninner_text:" + this.inner_text + "\nparent:" + this.parent + "\nchildren:" + this.children + "\nlocated: " + this.x + "," + this.y);
        return this;
      }

      return MindMapNode;

    })();

    function MindMap(root, x, y, radius) {
      this.root = root;
      this.x = x;
      this.y = y;
      this.radius = radius != null ? radius : 100;
      this.nodes = [];
      this.nodes.push(new MindMapNode(this.root, "root", this.x, this.y));
      print("mindmap with root of " + this.root + " generated");
      print("located at: " + this.x + "," + this.y);
      print("with radius: " + this.radius + "px");
      return;
    }

    return MindMap;

  })();

  node_array = [
    {
      color: "root",
      red: "color",
      blue: "color",
      green: "color"
    }
  ];

  m = new MindMap("colors", 500, 500, 50);

  return;

}).call(this);
